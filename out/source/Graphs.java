/* autogenerated by Processing revision 1293 on 2024-11-26 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Graphs extends PApplet {

CartesianPlane cp ;
Cluster DEFAULT= new Cluster("D",0xFF000000,new Point(0,0));
public void setup() {
    /* size commented out by preprocessor */;
 
    cp = new CartesianPlane(7,7);
    // addStaticDataset();
    generateKMeansDataset(3,10);
    //addRandomPoints(1000,-5,5,-5,5);
    cp.randomInit();
    frameRate(0.5f);
}

public void draw() {
    background(255);
    cp.showGrid();
    cp.draw();
    cp.applyKmeans();

}
public void addRandomPoints(int numPoints, float xMin, float xMax, float yMin, float yMax) {
    for (int i = 0; i < numPoints; i++) {
        float x = random(xMin, xMax); // Generate random x-coordinate
        float y = random(yMin, yMax); // Generate random y-coordinate
        cp.addPoint(x, y);            // Add the point to the Cartesian plane
    }
}
// Function to generate a dataset for K-Means
public void generateKMeansDataset(int numClusters, int pointsPerCluster) {
    float spread = 3; // Spread of points around each cluster center
    
    for (int c = 0; c < numClusters; c++) {
        // Generate a random cluster center
        float centerX = random(-5, 5);
        float centerY = random(-5, 5);
        
        for (int i = 0; i < pointsPerCluster; i++) {
            // Generate points around the cluster center
            float x = centerX + random(-spread, spread);
            float y = centerY + random(-spread, spread);
            cp.addPoint(x, y);
        }
    }
}

public void addStaticDataset() {
    // Cluster 1
    cp.addPoint(2, 3);
    cp.addPoint(2.2f, 2.8f);
    cp.addPoint(1.8f, 3.2f);
    cp.addPoint(2.1f, 3.1f);

    // Cluster 2
    cp.addPoint(-4, -5);
    cp.addPoint(-3.9f, -5.1f);
    cp.addPoint(-4.1f, -4.8f);
    cp.addPoint(-3.8f, -5.2f);

    // Cluster 3
    cp.addPoint(6, -3);
    cp.addPoint(5.8f, -2.9f);
    cp.addPoint(6.2f, -3.1f);
    cp.addPoint(6.1f, -2.8f);
}

public class CartesianPlane  {
    ArrayList<Point> points = new ArrayList<Point>();
    float rangeX;
    float rangeY;
    Cluster c1;
    Cluster c2;
    Cluster c3;
        
    public CartesianPlane (int rangeX , int rangeY) {
        this.rangeX= rangeX;
        this.rangeY = rangeY;
    }
    public void drawPoint(Point p){
        p.dx = map(p.x, -rangeX, rangeX, 0 ,width);
        p.dy = map(p.y, rangeY, -rangeY, 0 ,height);  
        p.show();
    }
   
    public void showGrid(){
        stroke(0);
        line(mapToPlaneX(0), mapToPlaneY(rangeY), mapToPlaneX(0), mapToPlaneY(-rangeY));
        line(mapToPlaneX(rangeX), mapToPlaneY(0), mapToPlaneX(-rangeX), mapToPlaneY(0));
        for (int i = (int)-rangeX; i < (int)rangeX; ++i) {
            Point p = new Point(i,0);
            p.size=5;
            p.c = color(100);
            mapToPlane(p).show();
            fill(0);
            text(i,p.dx,p.dy+15);
        }
        for (int i = (int)-rangeY; i <(int) rangeY; ++i) {
            Point p = new Point(0,i);
            p.size=5;
            p.c = color(50);
            mapToPlane(p).show();
            fill(0);
            text(i,p.dx-15,p.dy);
        }
    }
    public void addPoint(Point p){
        points.add(mapToPlane(p));
    }
    public void addPoint(float x, float y){
        Point p=new Point(x,y);
        points.add(mapToPlane(p));
    }
    public void draw(){
        for (Point p : points) {            
            p.show();
        }
    }
    public Point mapToPlane(Point p){
        p.dx = map(p.x, -rangeX, rangeX, 0 ,width);
        p.dy = map(p.y, rangeY, -rangeY, 0 ,height);  
        return p;
    }
    public float mapToPlaneX(float p){
       return map(p, -rangeX, rangeX, 0 ,width);
       
    } 
    public float mapToPlaneY(float p){
     return map(p, rangeY, -rangeY, 0 ,height);  
    }
    int init;
     public void  randomInit(){
        c1=new Cluster("First",color(255,0,0),points.get(0));
        c2=new Cluster("Second",color(0,255,0),points.get(1));
        c3=new Cluster("Third",color(0,0,255),points.get(2));
        c1.add(points.get(0));
        c2.add(points.get(1));
        c3.add(points.get(2));
        init=2;
     }
    public void applyKmeans(){
       
        int len = points.size();
        for (int i = init; i < len; ++i) {
            var p = points.get(i);
            p.remove();
            float dis1 = dist(c1.centroid().x, c1.centroid().y, p.x, p.y);
            float dis2 = dist(c2.centroid().x, c2.centroid().y, p.x, p.y);
            float dis3 = dist(c3.centroid().x, c3.centroid().y, p.x, p.y);
            float min = min(new float[]{dis1,dis2,dis3});
            if(dis1==min){
                c1.add(p);
            }else if (dis2==min) {
               c2.add(p) ;
            }else{
                c3.add(p) ;
            }
        }init=0;
        println(c1);
        println(c2);
        println(c3);
        c1.drawCentroid();
        c2.drawCentroid();
        c3.drawCentroid();
    }
}
public class Cluster  {
    
    String name;
    int c;
    ArrayList<Point> members = new ArrayList<Point>();
    Point defCentroid;
    public Cluster (String name,int c,Point defCentroid) {
        this.name = name;
        this.c =c;
        this.defCentroid=defCentroid;
    }
    public void add(Point p){
        members.add(p);
        p.cluster=this;
        p.c=this.c;
    }
    public Point centroid(){
        float xSum=0;
        float ySum=0;
        if(members.size()==0){
            return defCentroid;
        }
        for (Point p : members) {
            xSum+=p.x;
            ySum+=p.y;
        }
        int n = members.size();
        return new Point(xSum/n,ySum/n);
    }
    public void drawCentroid(){
        Point p = centroid();
        p.c=color(0,0,0);
        p.size=10;
        cp.drawPoint(p);
    }
    @Override
    public String toString(){
        return name+ " : "+members.size()+" : "+members.toString();
    }
}
class Point {
    float size=10;
    float x = 0.0f;
    float y = 0.0f;
    float dx=0.0f;
    float dy=0.0f;
    Cluster cluster;
    int c = color(0, 0, 0);
    Point(float x , float y ){
        this.x = x;
        this.y = y;
        cluster=DEFAULT;
    }
    public void show(){
        noStroke();
        fill(c);
        circle(dx,dy,size);
    }
    public void remove(){
        cluster.members.remove(this);
        cluster=DEFAULT;
    }
     @Override
    public String toString(){
        return "["+(int)x+"|" +(int)y+"]";
    }
}


  public void settings() { size(1000, 1000); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Graphs" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
